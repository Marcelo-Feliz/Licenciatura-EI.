#include <stdio.h>


int resolveM(int x,int n,int a[],int m) //algoritmo principal com 2 ou mais numeros x solucao, n quantidade de elementos, a array, m nivel da procura
{
    int j;
    int soma=0;
    for(int i = 1;i<n-m+2;i++){ // enquanto o numero for menor do que elementos -m+2
        if(i==1) //calcula a soma de maneira normal com um for
        {
            for(j=i;j<i+m;j++)
            {
                soma = soma +a[j];
            }
        }
        if (i>1) //recalcula a soma retirando um elemento e adicionando +1 (andar para a direita)
        {
            soma = soma - a[i-1];
            soma = soma + a[i+m-1];
        }
        if(soma==x)
        {
            if(m==1)
            {
                printf("s[%d] = %d\n",i,x);
                return 0;
            }

            j=i+m-1;
            int d = j-(j-m+1);
            j=j-m+1;
            printf("s[%d] + ",j);
            if(d>1){
                printf("... + ");
            }
            j= j+m-1;
            printf("s[%d] = %d\n",j,x);
            return 0;
        }
    }
    if(m+1>n)
    {
        printf("nenhuma subsequencia soma %d\n",x);
        return -1;
    }
    resolveM(x,n,a,m+1);
    return 0;
}

int listaN(int e,int a[]) //lÃÂª o input e guarda em a[]
{
    int n;
    for (int i=1;i<e+1;i++)
    {
        scanf("%d", &n);
        a[i]=n;
    }
    return 0;
}

int main(void)
{   
    int n; //quantidade de elementos
    int s; //numero que queremos para a solucao
    scanf("%d\n", &n); //scan da quantidade de elementos
    int a[n]; // lista para guardar os elementos
    
    listaN(n,a);

    scanf("%d", &s); //scan do numero que queremos para a solucao

    resolveM(s,n,a,1);


    return 0;
}